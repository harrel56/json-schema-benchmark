import org.apache.tools.ant.taskdefs.condition.Os

plugins {
    id 'java'
}

group = 'dev.harrel'
version = '1.0.0'

repositories {
    mavenCentral()
}

dependencies {
    implementation 'net.bytebuddy:byte-buddy:1.17.5'
    implementation 'net.bytebuddy:byte-buddy-agent:1.17.5'
    implementation 'org.openjdk.jmh:jmh-core:1.37'
    annotationProcessor 'org.openjdk.jmh:jmh-generator-annprocess:1.37'

    // just for sake of local edition and completion
    implementation 'dev.harrel:json-schema:1.8.1'
    implementation 'com.fasterxml.jackson.core:jackson-databind:2.19.0'
}

def providers = [
        [id   : 'jackson', group: 'com.fasterxml.jackson.core', name: 'jackson-databind', version: '2.19.0'],
        [id   : 'gson', group: 'com.google.code.gson', name: 'gson', version: '2.13.0']
]
def versions = ['1.0.0', '1.1.0', '1.2.2', '1.3.4', '1.4.3', '1.5.2', '1.6.1', '1.7.3', '1.8.1']

providers.forEach { provider ->
    versions.forEach {ver ->
        def sourceSetName = "benchmark${provider.id.capitalize()}${ver.replace('.', '_')}"
        def sourceSet = sourceSets.register(sourceSetName) {
            java {
                srcDirs sourceSets.main.java.srcDirs
            }
            resources {
                srcDirs sourceSets.main.resources.srcDirs
            }
        }.get()
        configurations.getByName(sourceSet.implementationConfigurationName).extendsFrom configurations.implementation
        configurations.getByName(sourceSet.annotationProcessorConfigurationName).extendsFrom configurations.annotationProcessor
        dependencies.add(sourceSet.implementationConfigurationName, [group: 'dev.harrel', name: 'json-schema', version: ver])
        dependencies.add(sourceSet.implementationConfigurationName, [group: provider.group, name: provider.name, version: provider.version])
        tasks.register("run${sourceSetName.capitalize()}", JavaExec) {
            group 'benchmark'
            main 'dev.harrel.benchmark.Main'
            classpath sourceSet.runtimeClasspath
            environment 'TEST_RUN', 1
            environment 'LIB_VERSION', ver
            environment 'JSON_PROVIDER', provider.id
            jvmArgs '-XX:+EnableDynamicAgentLoading'
        }
    }
}


tasks.register('runAllBenchmarks', Task) {
    tasks.matching { it.group == 'benchmark' }.each {
        dependsOn it.name
    }
}

tasks.register('buildSite', Exec) {
    group 'build'
    commandLine getNpxCommand(), '@11ty/eleventy@3.0.0'
}

static def getNpxCommand() {
    if (Os.isFamily(Os.FAMILY_WINDOWS)) {
        return 'npx.cmd'
    } else {
        return 'npx'
    }
}
